name: "Typst Out"
description: "Build Typst files using a custom Typst ref"
branding:
  icon: "file-text"
  color: "blue"
inputs:
  typst_version:
    description: "The version or ref of Typst to use for building"
    required: false
    default: "latest"
  retention_days:
    description: "The number of days to retain the PDFs as artifacts"
    required: false
    default: "7"
  artifacts_name:
    description: "The name of the artifacts to upload"
    required: false
    default: "typst_output"
  output_extensions:
    description: "The extensions of the output files"
    required: false
    default: "pdf"
  template_file:
    description: "The template file to use"
    required: false
    default: "template.typ"

runs:
  using: "composite"
  steps:
    - name: Echo Typst ref
      shell: bash
      run: |
        echo "Typst ref: ${{ inputs.typst_ref }}"

    - name: Check Version
      id: check_version
      shell: bash
      run: |
        function get_rate_limit() {
          rate_limit_remaining=$(gh api rate_limit --jq '.rate.remaining')
          reset_time=$(gh api rate_limit --jq '.rate.reset')
          echo "Rate limit remaining: $rate_limit_remaining"
        }

        function wait_for_rate_limit() {
          while [[ $rate_limit_remaining -eq 0 ]]; do
            echo "Rate limit exceeded. Waiting for reset..."
            sleep $((reset_time - $(date +%s)))
            get_rate_limit
          done
        }

        function fetch_typst_version() {
          retry_count=0
          max_retries=3
          while true; do
            if [[ "${{ inputs.typst_version }}" == "latest" ]]; then
              echo "Typst version: latest"
              typst_ref=$(gh api https://api.github.com/repos/typst/typst/releases/latest --jq '.tag_name' || echo "fail")
            else
              echo "Typst version: ${{ inputs.typst_version }}"
              typst_ref=${{ inputs.typst_version }}
            fi

            if [[ $typst_ref != "fail" ]]; then
              break
            else
              echo "Failed to fetch Typst version. Retrying in 5 seconds..."
              ((retry_count++))
              if [[ $retry_count -ge $max_retries ]]; then
                echo "Max retries reached. Exiting with failure."
                exit 1
              fi
              sleep 5
            fi
          done
        }

        get_rate_limit
        wait_for_rate_limit
        fetch_typst_version

        echo "Using Typst ref: $typst_ref"
        echo "typst_ref=$typst_ref" >> $GITHUB_OUTPUT

    - name: Cache Typst build
      uses: actions/cache@v4
      id: typst_cache_build
      with:
        path: ~/typst_build
        key: typst-build-${{ steps.check_version.outputs.typst_ref }}-${{ runner.os }}

    - name: Setup Rust
      if: steps.typst_cache_build.outputs.cache-hit != 'true'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Cache Rust
      if: steps.typst_cache_build.outputs.cache-hit != 'true'
      uses: Swatinem/rust-cache@v2

    - name: Checkout Typst
      if: steps.typst_cache_build.outputs.cache-hit != 'true' || steps.typst_cache_fonts.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: typst/typst
        path: typst
        ref: ${{ steps.check_version.outputs.typst_ref }}

    - name: Install Typst
      if: steps.typst_cache_build.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd typst
        cargo build -p typst-cli --release
        cd ..
        if [ -f typst/target/release/typst ]; then
          mkdir -p ~/typst_build
          cp typst/target/release/typst ~/typst_build/typst
          echo "Typst build succeeded"
        else
          echo "Typst build failed"
          exit 1
        fi

    - name: Delete Typst Source
      if: steps.typst_cache_build.outputs.cache-hit != 'true' || steps.typst_cache_fonts.outputs.cache-hit != 'true'
      shell: bash
      run: |
        rm -rf typst

    - name: Compile Typst files
      shell: bash
      run: |
        templatefile="${{ inputs.template_file }}"
        outputextension="${{ inputs.output_extensions }}"
        echo "Compiling Typst files"
        echo "Template file: $templatefile"
        echo "Output extension: $outputextension"
        find . -name "*.typ" -not -name "template.typ" | while read -r file; do
          echo "Compiling $file to ${file%.typ}.${outputextension}"
          ~/typst_build/typst compile "$file" "${file%.typ}.${outputextension}"
        done
        echo "Compiled Typst files"
        echo "Output files:"
        find . -name "*.$outputextension"

    - name: Upload ouputs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifacts_name }}
        path: |
          ./**/*.pdf
        retention-days: ${{ inputs.retention_days }}
